class Solution {
    public boolean isSafe(char[][] board,int r,int c,int n){
        for(int i=r-1,j=c-1;i>=0 && j>=0;i--,j--) // left diagonal
        {
            if(board[i][j]=='Q')
            {
                return false;
            }
        }
        for(int i=r-1,j=c;i>=0;i--) // upward 
        {
            if(board[i][j]=='Q')
            {
                return false;
            }
        }
        for(int i=r-1,j=c+1;i>=0 &&j<n;i--,j++)
        {
            if(board[i][j]=='Q')
            {
                return false;
            }
        }
        return true;

    }
    public void backtracking(int n,char board[][],List<List<String>> res ,int row)
    {
        if(row==n) // if all the rows are filled then we go here 
        {
            List<String> temp = new ArrayList<>();
            for(int i=0;i<n;i++)
            {
                temp.add(new String(board[i])); convert the array to string values and show them in list of list we use this
            }
            res.add(temp);
            return ;
        }
        for(int c=0;c<n;c++)
        {
            if(isSafe(board,row,c,n))
            {
                board[row][c]='Q';
                backtracking(n,board,res,row+1);
                board[row][c]='.';
            }
        }
    }
    public List<List<String>> solveNQueens(int n) {
        char[][] board = new char[n][n];
        List<List<String>> res = new ArrayList<>();
        for(int i=0;i<n;i++)
        {
            Arrays.fill(board[i],'.');
        }
        backtracking(n,board,res,0);
        return res;
    }

}
